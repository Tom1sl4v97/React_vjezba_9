{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ZZ0149704\\\\Desktop\\\\app\\\\React_vjezba_15_naprednija_navigacija\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json, defer } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  const events = data.events;\n  if (data.isError) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // throw new Response(\n    //   JSON.stringify({\n    //     message: \"Could not load events.\",\n    //   }),\n    //   { status: 500 }\n    // );\n    throw json({\n      message: \"Could not load events.\"\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport const loader = () => {\n  return defer({\n    events: loadEvents()\n  });\n};\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","defer","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventsPage","_s","data","events","isError","children","message","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","status","loader","$RefreshReg$"],"sources":["C:/Users/ZZ0149704/Desktop/app/React_vjezba_15_naprednija_navigacija/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData, json, defer } from \"react-router-dom\";\r\n\r\nimport EventsList from \"../components/EventsList\";\r\n\r\nfunction EventsPage() {\r\n  const data = useLoaderData();\r\n  const events = data.events;\r\n\r\n  if (data.isError) {\r\n    return <p>{data.message}</p>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <EventsList events={events} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nasync function loadEvents() {\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n\r\n  if (!response.ok) {\r\n    // throw new Response(\r\n    //   JSON.stringify({\r\n    //     message: \"Could not load events.\",\r\n    //   }),\r\n    //   { status: 500 }\r\n    // );\r\n    throw json({ message: \"Could not load events.\" }, { status: 500 });\r\n  } else {\r\n    return response;\r\n  }\r\n}\r\n\r\nexport const loader = () => {\r\n  return defer({\r\n    events: loadEvents(),\r\n  })\r\n};\r\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,EAAEC,KAAK,QAAQ,kBAAkB;AAE7D,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,IAAI,GAAGV,aAAa,CAAC,CAAC;EAC5B,MAAMW,MAAM,GAAGD,IAAI,CAACC,MAAM;EAE1B,IAAID,IAAI,CAACE,OAAO,EAAE;IAChB,oBAAOP,OAAA;MAAAQ,QAAA,EAAIH,IAAI,CAACI;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAC9B;EAEA,oBACEb,OAAA,CAAAE,SAAA;IAAAM,QAAA,eACER,OAAA,CAACF,UAAU;MAACQ,MAAM,EAAEA;IAAO;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBAC9B,CAAC;AAEP;AAACT,EAAA,CAbQD,UAAU;EAAA,QACJR,aAAa;AAAA;AAAAmB,EAAA,GADnBX,UAAU;AAenB,eAAeA,UAAU;AAEzB,eAAeY,UAAUA,CAAA,EAAG;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA;IACA;IACA;IACA,MAAMtB,IAAI,CAAC;MAAEa,OAAO,EAAE;IAAyB,CAAC,EAAE;MAAEU,MAAM,EAAE;IAAI,CAAC,CAAC;EACpE,CAAC,MAAM;IACL,OAAOH,QAAQ;EACjB;AACF;AAEA,OAAO,MAAMI,MAAM,GAAGA,CAAA,KAAM;EAC1B,OAAOvB,KAAK,CAAC;IACXS,MAAM,EAAES,UAAU,CAAC;EACrB,CAAC,CAAC;AACJ,CAAC;AAAC,IAAAD,EAAA;AAAAO,YAAA,CAAAP,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}